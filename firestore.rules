rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Public user directory for limited fields (email, name) used for suggestions
    match /user_directory/{userId} {
      // Any authenticated user can read directory entries
      allow read: if request.auth != null;
      // Only the owner (or backend) can write their own directory entry
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Users collection - users can read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Per-user notifications subcollection
      match /notifications/{notificationId} {
        // Any authenticated user can CREATE a notification for this user (e.g., system/app writes)
        allow create: if request.auth != null;
        // Only the owner can read/update/delete their notifications
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Expenses collection - users can read/write expenses they're involved in
    match /expenses/{expenseId} {
      // Allow reading if user is involved in the expense OR if it's a group expense and user is a group member
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.splitBetween || 
         request.auth.uid == resource.data.paidBy ||
         (resource.data.groupId != 'personal' && 
          exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
          (request.auth.uid == get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.createdByUserId ||
           request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberUserIds)));
      
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.splitBetween;
      
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.splitBetween || 
         request.auth.uid == resource.data.paidBy);
      
      allow delete: if request.auth != null && 
        (
          request.auth.uid in resource.data.splitBetween || 
          request.auth.uid == resource.data.paidBy ||
          (
            resource.data.groupId != 'personal' &&
            exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
            request.auth.uid == get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.createdByUserId
          )
        );
    }
    
    // Groups collection - users can read/write groups they're members of
    match /groups/{groupId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.createdByUserId || 
         request.auth.uid in resource.data.memberUserIds);
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdByUserId;
    }
    // Deleted archives (allow app to write/read archives)
    match /deleted_groups/{groupId} {
      allow read, write: if request.auth != null;
      match /expenses/{expenseId} {
        allow read, write: if request.auth != null;
      }
    }
  }
}
